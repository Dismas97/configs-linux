#+TITLE: Config Emacs
#+AUTHOR: fran
#+LANGUAGE: es
#+STARTUP: content indent showeverything
#+DESCRIPTION: Configuracion personal de emacs para centralizar lo que es documentacion, desarrollo y edicion de texto en general.
#+PROPERTY: header-args:emacs-lisp :tangle "init.el"

* Introduccion
Este archivo  documenta mi config personal de emacs. Esta config apunta a moldear Emacs para convertirlo en una plataforma unificada de desarrollo y documentacion.

Deberia proporcionar las herramientas basicas de una IDE al desarrollar en un lenguaje dado (y entorno), permitir tomar notas en general, crear documentos en general, proporcionar herramientas basicas para la documentacion de software (generar diagramas uml, bpmn, etc) y herramientas para la gestion organizacional y personal (agenda, todo).

Dado que Emacs es facilmente extensible y cuenta con innumerables paquetes considero que es una eleccion apropiada como plataforma para llevar a cabo este proyecto, por ejemplo, Emacs cuenta con ORG-Mode, un modo de emacs que nos va a facilitar el proceso de documentar y organizarnos, Eglot funciona como cliente LSP(Lenguaje server protocol) y nos da la mayoria de funcionalidades de una IDE, magit nos permite gestionar repositorios git, etc.

Se busca que el resultado final sea consistente y accesible. Configuraciones respecto a combinaciones de teclas, navegacion entre buffers, etc. deberian respetar un formato estandarizado.

* TODO Pendiente
** TODO Separar bindeos
En una seccion aparte de este mismo org o en un archivo aparte.
*** TODO Definir formato propio de bindeos
Fijarse que onda los paquetes como hydra
** TODO Ampliar explicaciones config
Esto, explayarme mas con lo que hago en cada segmento de codigo

* Guia Rapida :guia:keys:
Al abrir o crear un archivo en emacs realmente estamos trabajando con un *Buffer*, cualquier modificacion que hagamos seran aplicadas al buffer y no al archivo, solo cuando realizamos un guardado es que emacs escribe el buffer a disco. Emacs utiliza un *mini buffer* para notificar informacion importante al usuario y para leer inputs para comandos (por ejemplo palabras a buscar en un buffer).

Los comandos en emacs involucran la tecla =CONTROL= y la tecla =ALT= o =META=. La combinacion de dichas teclas con otras nos permite ejecutar comandos y prefijos en emacs. El comando mas importante y util es =M-x= el cual nos permite ejecutar comandos por nombre, cuando no recordemos la combinacion de un comando en particular. Emacs utiliza =C-x= como *comando extendido* el cual sirve como prefijo de muchos comandos importantes como =C-x C-f= el cual nos permite buscar y crear archivos, =C-x C-s= el cual guarda los cambios del buffer actual, =C-x C-c= cierra la sesion actual de emacs.

Emacs guarda en el *kill ring* los elementos que fue copiando/cortando, es una lista circular, funciona como un *porta papeles*.

** Lista de comandos basicos
- =C-h t= abre el tutorial de emacs.
- =C-h ?= abre guia interna de emacs.
- =C-h c <comando>= muestra la funcion a la que llama el comando dado.
- =C-h k <comando>= muestra documentacion de la funcion que llama el comando dado.
- =C-h v= muestra documentacion de variables de emacs (como el kill ring por ej)
- =C-h i= abre los manuales incluidos en emacs.
- =C-= y =M-= se refieren a la letra control/alt combinada con un caracter dado.
- =C-x C-c= cierra la sesion actual de emacs.
- =C-x C-s= guarda los cambios del buffer actual al archivo.
- =C-x C-b= lista todos los buffers abiertos.
- =C-x b= cambia al buffer dado.
- =C-x k= cierra el buffer dado.
- =C-x ->=, =C-x <-= cambia al siguiente/anterior buffer en la lista de buffers.
- =C-x s= guarda los cambios en todos los buffers abiertos, emacs te consulta en cada buffer si queres guardar los cambios.
- =M-x= ejecutar comando por nombre.
- =C-g= cancela el comando actual, permite descartar una combinacion de teclas que todavia no se ha resuelto en un comando.
- =C-l= mueve el texto alrededor del cursor.
- =C-s=, =C-r= realiza una busqueda incremental hacia adelante/atras en el buffer actual, se ingresa la palabra a buscar en el minibufer, consecutivos =C-s=, =C-r= mueven el cursor a la siguiente/anterior coincidencia la busqueda se termina con =Enter=.
- =C-v= realiza un salto a la siguiente pagina del buffer (como =AvPag=).
- =M-v= realiza un salto a la pagina anterior del buffer (como =RePag=).
- =C-p=, =C-n= mueve el cursor a la linea anterior/siguiente respectivamente.
- =C-b=, =C-f= mueve el cursor un caracter hacia atras/adelante respectivamente.
- =M-b=, =M-f= mueve el cursor una palabra hacia atras/adelante respectivamente.
- =C-a=, =C-e= mueve el cursor al principio/final de la linea.
- =M-a=, =M-e= mueve el cursor al principio/final de la sentencia.
- =C-w= cortar texto seleccionado.
- =M-w= copiar texto seleccionado.
- =C-y= pegar el ultimo elemento que fue copiado/cortado en el *kill ring*.
- =M-y= pega el elemento seleccionado del *kill ring*, usos sucesivos del comando inmediatamente despues de haber usado =C-y= permite cambiar el texto pegado iterando en los elementos del *kill ring*.
- =C-k= corta desde la posicion del cursor hasta el final de la linea.
- =M-k= corta desde la posicion del cursor hasta el final de la sentencia.
- =C-d= elimina el siguiente carater desde la posicion del cursor.
- =M-d= elimina la siguiente palabra desde la posicion del cursor.
- =M-<DEL>= elimina la anterior palabra desde la posicion del cursor.
- =C-<SPC>= permite seleccionar un area con el cursor.
- =C-/=, =C-_=, =C-x y= restaura el ultimo cambio.
- =C-x 0= cierra la ventana enfocada.
- =C-x 1= cierra todas las ventanas menos la ventana enfocada.
- =C-x 2= divide la ventana actual de forma vertical.
- =C-x 3= divide la ventana actual de forma horizontal.
- =C-x 4 f= abre el archivo seleccionado en otra ventana.
- =C-x o= mueve el cursor a la siguiente ventana de manera circular
- =C-M-v=, =C-M-<SHIFT>-v= hace un salto de pagina hacia adelante/atras en la ventana no enfocada

** Autoguardado
Emacs genera automaticamente un archivo #nombrearchivo.extencion# de autoguardado, si por algun motivo se cierra la sesion sin guardar el buffer. La proxima vez que abramos el mismo archivo que se nos cerro de forma inesperada podemos recuperar el trabajo con =M-x recover-this-file=, luego emacs nos preguntara una confirmacion. Una vez guardemos el buffer en un archivo el archivo de autoguardado automaticamente se borrara.

* Configuracion Basica
** Config Basica
Abrir Config.org =C-c c=
Cerrar brakets, mostrar donde cierran, cantidad de espacios del tab (4), numero de linea y columna, mostrar numero de lineas, mostrar lineas largas como varias, borrar seleccion al tipear, etc.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") (lambda () (interactive) (find-file "~/.emacs.d/config.org"))) ; bindeo para abrir config
                                          ;(electric-pair-mode 1)
  (show-paren-mode 1)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
;;  (setq-default c-basic-indent 2)
;;  (setq-default c-basic-offset 2)
;;  (setq js-indent-level 2)
;;  (setq css-indent-offset 2)
;;  (setq c-basic-offset 2)

  (setq column-number-mode t)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  (electric-indent-mode 1)
  (setq whitespace-line-column 1000)
  (delete-selection-mode 1)
  (auto-image-file-mode t)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  (winner-mode 1)

  ;;Apariencia matcheo de parentesis 
  (set-face-background 'show-paren-match "wheat")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
  (show-paren-mode)

  ;;Desactivar barra de menu, scroll, pagina inicio, cursor parpadeante
  (setq inhibit-startup-message t visible-bell t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode 0)

#+end_src

** Cambiar directorio de backups.
Emacs cada vez que guardas archivos te crea un backup en el mismo directorio del archivo por defecto, aca muevo todos los backups a una carpeta especifica
#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-saved-items 50)
  (setq backup-directory-alist `(("." . "~/.emacs.d/autoguardado/")))
#+end_src

* ORG Mode :org:
** Config basica
#+begin_src emacs-lisp
  (require 'org)
  (setq-default org-enforce-todo-dependencies t) ; fuerza TODO al padre de un item
  (setq org-startup-with-inline-images t) ; Muestra las imagenes por defecto, en vez de mostrar links
  (add-hook 'org-mode-hook 'org-display-inline-images) ; cuando creo un archivo desde el org mode (por ejemplo una img como resultado de plant uml) actualiza todas las imagenes
  (setq org-M-RET-may-split-line '((default . nil))) ; M-RET es para crear nuevo headline, item lista, subnivel, etc del nivel actual
  (setq org-insert-heading-respect-content t)
  (setq org-log-done 'time)

  (setq org-treat-insert-todo-heading-as-state-change t)
  (setq org-log-into-drawer t)
  (add-to-list 'org-modules 'org-habit t)
#+end_src
** Org agenda
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq tareas-dir "~/Organizacion/")
  (setq org-agenda-files (list tareas-dir))
  (setq org-agenda-current-time-string "← Ahora")
  (setq org-agenda-format-date "%d/%m/%Y")
  (setq org-agenda-time-grid '((daily today) () "" ""))

  (setq org-agenda-custom-commands
        '(("n" "TAREAS" (
            (tags-todo "+DEADLINE<\"<today>\"|+SCHEDULED<\"<today>\""
                       ((org-agenda-overriding-header "\nATRASADO\n")
                        (org-agenda-block-separator ?─)
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))))
            
            (agenda ""
                    ((org-agenda-overriding-header "\nDIA\n")
                     (org-agenda-block-separator ?─)
                     (org-agenda-span 1)))
            
            (agenda ""
                    ((org-agenda-overriding-header "\nSEMANA\n")
                     (org-agenda-block-separator ?─)
                     (org-agenda-span 7)))
            (agenda ""
                    ((org-agenda-overriding-header "\nMES\n")
                     (org-agenda-block-separator ?─)
                     (org-agenda-span 30)))

            (tags-todo "*"
                       ((org-agenda-overriding-header "\nTAREAS A FUTURO\n")
                        (org-agenda-block-separator ?─)
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'done 'scheduled 'deadline))))))))

#+end_src

* GUI
** Fuentes
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (setq-default line-spacing 0.12)

  (setq fran/fuente-codigo "Inconsolata Nerd Font")
  (setq fran/fuente-texto "Iosevka Nerd Font")

  (set-face-attribute 'org-block nil :family fran/fuente-codigo)
  (set-face-attribute 'default nil :family fran/fuente-texto :height 150)

  (add-hook 'prog-mode-hook
            (lambda ()
              (setq buffer-face-mode-face `(:family ,fran/fuente-codigo))
              (buffer-face-mode t)))
#+end_src
** Mode-line
#+begin_src emacs-lisp
#+end_src
* Propio
Funciones definidas por mi, algunos cambios de bindeos, etc.

#+begin_src emacs-lisp
  (setq fran/lista-temas '(doom-feather-light doom-dracula))
  (setq aux-temas 0)

  (setq fran/tema-actual (nth aux-temas fran/lista-temas))
  (defun fran/cambiar-tema ()
    (interactive)
    (progn
      (when fran/tema-actual (disable-theme fran/tema-actual))
      (setq aux-temas (mod (1+ aux-temas) (length fran/lista-temas)))
      (setq fran/tema-actual (nth aux-temas fran/lista-temas))
      (load-theme fran/tema-actual t)))

  (defun fran/nueva-linea-abajo () 
    (interactive) 
    (end-of-line) 
    (newline-and-indent))

  (defun fran/nueva-linea-arriba () 
    (interactive) 
    (beginning-of-line) 
    (newline) 
    (forward-line -1) 
    (indent-according-to-mode))


  (global-set-key (kbd "C-c t") 'fran/cambiar-tema)
  (global-set-key (kbd "M-RET") 'fran/nueva-linea-abajo)
  (global-set-key (kbd "M-S-RET") 'fran/nueva-linea-arriba)
  (global-set-key (kbd "C-S-z") 'undo-redo)
  (global-set-key (kbd "C-z") 'undo)
#+end_src

** Acciones al guardar archivos org 
Autotanglear archivos .el al guardar archivos.org.
Lo mismo que hacer =C-c C-v t=.
#+begin_src emacs-lisp
  (defun fran/auto-tangle ()
    (when (string-equal (file-name-extension buffer-file-name) "org")
      (org-babel-tangle)))
  (add-hook 'after-save-hook 'fran/auto-tangle)
#+end_src

* Paquetes :paquetes:
** Paquetes esenciales
*** Gestor de paquetes
Inicializo el gestor de paquetes por defecto de emacs, agrego repos melpa y gnu, inicializo use-package.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+end_src

*** Paquetes que mejoran la experiencia en emacs
Vertico es una UI para el autocompletado del minibuffer.
#+begin_src emacs-lisp
  (use-package vertico :ensure t
    :custom
    (vertico-scroll-margin 0)
    (vertico-count 10)
    (vertico-resize t)
    (vertico-cycle t)
    :init
    (vertico-mode))
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (keymap-set vertico-map "<left>" #'vertico-directory-up)
  (keymap-set vertico-map "<right>" #'vertico-insert)
#+end_src

Corfu, UI autocompletado de buffer (codigo).
#+begin_src emacs-lisp
  (use-package corfu :ensure t
    :hook
    (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    (corfu-resize t)
    (corfu-auto-delay 0.25)
    (corfu-auto-prefix 1)
    (corfu-preview-current nil)
    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
  (keymap-set corfu-map "TAB" #'corfu-next)
  (keymap-set corfu-map "<backtab>" #'corfu-previous)
  (setq corfu-popupinfo-delay 0.2)

  (with-eval-after-load 'corfu
    (define-key corfu-map (kbd "<next>") #'corfu-popupinfo-scroll-up)
    (define-key corfu-map (kbd "<prior>") #'corfu-popupinfo-scroll-down))

#+end_src

Which-key, muestra opciones de autocompletado para comandos. Marginalia, muestra metadatos en el minibuffer (info de comandos, permisos de archivos, etc).
#+begin_src emacs-lisp
  (use-package which-key :ensure t :config (which-key-mode))
  (use-package marginalia :ensure t :init (marginalia-mode))
#+end_src

Orderless, agrega busqueda sin orden en los autocompletados.
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (setq orderless-skip-highlighting nil
        orderless-component-separator #'orderless-escapable-split-on-space)

#+end_src

** Paquetes desarrollo
*** Paquetes que proveen funcionalidades de IDE.
Config automatica de treesit
#+begin_src emacs-lisp 
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (setq treesit-auto-langs '(c java javascript html css))
    (global-treesit-auto-mode))
#+end_src

Magit, GUI de git en emacs
Projectile, mejora la gestion de proyectos, busqueda de archivo en el proyecto, compilacion, etc.
#+begin_src emacs-lisp 
  (use-package magit :ensure t)
  (use-package projectile :ensure t :init (projectile-mode +1)
    :config (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

Flycheck le da una UI al debuguer, errores de sintaxix, numero linea con error, subrayar variable con error,etc.
Quickrun es para hacer ejecucciones de codigo en el buffer.
#+begin_src emacs-lisp
  (use-package yasnippet-snippets :ensure t)
  (use-package flycheck :ensure t :init (global-flycheck-mode))
  (use-package quickrun  :ensure t :bind ("C-c r" . quickrun))
#+end_src

Eglot, LSP de emacs, configurado con algunos lenguajes.
#+begin_src emacs-lisp
  (use-package eglot
    :hook
    ((c-mode . eglot-ensure)
     (c++-mode . eglot-ensure)
     (js-mode . eglot-ensure)
     (java-mode . eglot-ensure))
    :custom
    (fset #'jsonrpc--log-event #'ignore)
    (eglot-events-buffer-size 0))

  (setq eglot-autoshutdown t)
  (add-hook 'eglot-managed-mode-hook 
            (lambda () (setq xref-backend-functions #'eglot-xref-backend)))
  (add-hook 'java-mode-hook 'eglot-java-mode)

  (setq read-process-output-max (* 1024 1024))  ; Aumentar buffer a 1MB
  (setq eglot-sync-connect 1)
#+end_src

Yasnippet, permite definir snippets en emacs, viene con varios por defecto.
Algunas definiciones de snippets para org-mode, tangle archivo, a directorio, etc.
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t :config (yas-global-mode 1))

  (yas-define-snippets 'org-mode
                       '(("eli" "#+begin_src emacs-lisp \n${1:}\n#+end_src"
                          "Bloque de codigo emacs-lisp" nil nil nil "~/.emacs.d/snippets/elt" nil nil)

                         ("ela" "#+begin_src emacs-lisp :tangle \"${1:archivo}\" :mkdirp yes\n\n#+end_src"
                          "Bloque de codigo emacs-lisp con tangle a $archivo" nil nil nil "~/.emacs.d/snippets/ela" nil nil)

                         ("suml" "#+begin_src plantuml :file \"${1:archivo}\" :mkdirp yes\n\n#+end_src"
                          "Bloque de codigo plantuml, guarda en $archivo" nil nil nil "~/.emacs.d/snippets/suml" nil nil)
                         
                         ("verb" "#+begin_src verb \n${1:}\n#+end_src"
                          "Bloque de codigo verb" nil nil nil "~/.emacs.d/snippets/verb" nil nil)

                         ("sscm" "#+begin_src scheme \n${1:}\n#+end_src"
                          "Bloque de codigo scheme" nil nil nil "~/.emacs.d/snippets/scheme" nil nil)))

#+end_src

Api de devdocs, documentacion de muchisimos lenguajes.
#+begin_src emacs-lisp
  (use-package devdocs :ensure t)
  (global-set-key (kbd "C-h D") 'devdocs-lookup)
#+end_src

Cliente http emacs con org mode
#+begin_src emacs-lisp 
  (use-package verb :ensure t)
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((verb . t)))
#+end_src
*** Lenguajes
Paquetes de lenguajes especificos

Sly, REPL common lisp para emacs.
#+begin_src emacs-lisp
  (use-package sly :ensure t)
  (setq inferior-lisp-program "/usr/bin/sbcl")
#+end_src

** Paquetes ORG
Tabla de contenidos org.
#+begin_src emacs-lisp
  (use-package toc-org :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

Plantum, genera diagramas UML desde codigo plant uml ejecutado con org-babel
#+begin_src emacs-lisp
  (use-package plantuml-mode :ensure t)
  (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml/plantuml.jar"))
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scheme . t)
     (plantuml . t)))
#+end_src

** GUI
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :custom
    (doom-themes-enable-bold t) 
    (doom-themes-enable-italic t)
    :config
    (load-theme fran/tema-actual t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

  (use-package solaire-mode  ;; Cambia de color los buffers "secundarios" como pop ups, terminal, etc. para que sea mas facil distinguir de los "primarios"
    :ensure t
    :config
    (solaire-global-mode +1))

  (use-package rainbow-mode :ensure t :hook org-mode prog-mode) ;;Muestra los codigos rgb con color

  (use-package rainbow-identifiers :ensure t)
  (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)

  (use-package rainbow-delimiters :ensure t :hook ((org-mode . rainbow-delimiters-mode) (prog-mode . rainbow-delimiters-mode)))

  ;;Para leer pdfs
  (use-package pdf-tools :ensure t :config
    (pdf-loader-install)
    (setq pdf-loader-install-commands 'install))
  (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
  (setq pdf-view-disable-text-extraction nil)
#+end_src

