#+TITLE: Config Emacs
#+AUTHOR: fran
#+LANGUAGE: es
#+STARTUP: content indent
#+DESCRIPTION: Configuracion personal de emacs para centralizar lo que es documentacion, desarrollo y edicion de texto en general.
#+PROPERTY: header-args:emacs-lisp :tangle "init.el"

Este archivo  documenta mi config personal de emacs. Esta config apunta a moldear Emacs para convertirlo en una plataforma unificada de desarrollo y documentacion.

Deberia proporcionar las herramientas basicas de una IDE al desarrollar en un lenguaje dado (y entorno), permitir tomar notas en general, crear documentos en general, proporcionar herramientas basicas para la documentacion de software (generar diagramas uml, bpmn, etc) y herramientas para la gestion organizacional y personal (agenda, todo).

Dado que Emacs es facilmente extensible y cuenta con innumerables paquetes considero que es una eleccion apropiada como plataforma para llevar a cabo este proyecto, por ejemplo, Emacs cuenta con ORG-Mode, un modo de emacs que nos va a facilitar el proceso de documentar y organizarnos, Eglot funciona como cliente LSP y nos da la mayoria de funcionalidades de una IDE, magit nos permite gestionar repositorios git, etc.

Se busca que el resultado final sea consistente y accesible. Configuraciones respecto a combinaciones de teclas, navegacion entre buffers, etc. deberian respetar un formato estandarizado.

* TABLA DE CONTENIDOS                                                 :toc:
- [[#pendiente][Pendiente]]
  - [[#agregar-intro-a-esta-config][Agregar intro a esta config]]
  - [[#separar-bindeos][Separar bindeos]]
  - [[#edicion-colaborativa][Edicion colaborativa]]
  - [[#configurar-org-agenda][Configurar Org Agenda]]
  - [[#ampliar-explicaciones-config][Ampliar explicaciones config]]
- [[#guia-rapida][Guia Rapida]]
  - [[#lista-de-comandos-basicos][Lista de comandos basicos]]
  - [[#autoguardado][Autoguardado]]
- [[#configuracion-basica][Configuracion Basica]]
  - [[#config-basica][Config Basica]]
  - [[#desactivar-barra-de-menu-scroll-pagina-inicio][Desactivar barra de menu, scroll, pagina inicio]]
  - [[#cambiar-directorio-de-backups][Cambiar directorio de backups.]]
  - [[#acciones-al-guardar-este-archivo][Acciones al guardar este archivo]]
- [[#paquetes][Paquetes]]
  - [[#gestor-de-paquetes][Gestor de paquetes]]
  - [[#vertico][Vertico]]
  - [[#corfu][Corfu]]
  - [[#which-key][Which-key]]
  - [[#marginalia][Marginalia]]
  - [[#orderless][Orderless]]
  - [[#projectile][Projectile]]
  - [[#snippets][Snippets]]
  - [[#flycheck-quickrun][Flycheck, Quickrun]]
  - [[#devdocs][Devdocs]]
  - [[#eglot][Eglot]]
- [[#org-mode][ORG Mode]]
  - [[#config-basica-1][Config basica]]
  - [[#toc-org][toc-org]]
  - [[#facha][Facha]]
  - [[#org-babel][Org-babel]]
- [[#gui][GUI]]
  - [[#fuentes][Fuentes]]
  - [[#temas-y-colorcitos][Temas y colorcitos]]

* TODO Pendiente
** TODO Agregar intro a esta config
A que aspiro con esta config, uso basico, etc.
** TODO Separar bindeos
En una seccion aparte de este mismo org o en un archivo aparte.
*** TODO Definir formato propio de bindeos
Fijarse que onda los paquetes como hydra
** TODO Edicion colaborativa
Como hago edicion colaborativa en emacs? A lo google docs, averiguar paquetes: *crdt*
** TODO Configurar Org Agenda
Como se usa? Como agrego TODOS a una lista global? como veo dicha lista? como les pongo fecha limite? puedo compartir esa lista? etc.
** TODO Ampliar explicaciones config
Esto, explayarme mas con lo que hago en cada segmento de codigo

* Guia Rapida
Al abrir o crear un archivo en emacs realmente estamos trabajando con un *Buffer*, cualquier modificacion que hagamos seran aplicadas al buffer y no al archivo, solo cuando realizamos un guardado es que emacs escribe el buffer a disco. Emacs utiliza un *mini buffer* para notificar informacion importante al usuario y para leer inputs para comandos (por ejemplo palabras a buscar en un buffer).

Los comandos en emacs involucran la tecla =CONTROL= y la tecla =ALT= o =META=. La combinacion de dichas teclas con otras nos permite ejecutar comandos y prefijos en emacs. El comando mas importante y util es =M-x= el cual nos permite ejecutar comandos por nombre, cuando no recordemos la combinacion de un comando en particular. Emacs utiliza =C-x= como *comando extendido* el cual sirve como prefijo de muchos comandos importantes como =C-x C-f= el cual nos permite buscar y crear archivos, =C-x C-s= el cual guarda los cambios del buffer actual, =C-x C-c= cierra la sesion actual de emacs.

** Lista de comandos basicos

=C-h t= abre el tutorial de emacs.
=C-h ?= abre guia interna de emacs.
=C-h c <comando>= muestra la funcion a la que llama el comando dado.
=C-h k <comando>= muestra documentacion de la funcion que llama el comando dado.
=C-h v= muestra documentacion de variables de emacs (como el kill ring por ej)
=C-h i= abre los manuales incluidos en emacs.
=C-= y =M-= se refieren a la letra control/alt combinada con un caracter dado.
=C-x C-c= cierra la sesion actual de emacs.
=C-x C-s= guarda los cambios del buffer actual al archivo.
=C-x C-b= lista todos los buffers abiertos.
=C-x b= cambia al buffer dado.
=C-x k= cierra el buffer dado.
=C-x ->=, =C-x <-= cambia al siguiente/anterior buffer en la lista de buffers.
=C-x s= guarda los cambios en todos los buffers abiertos, emacs te consulta en cada buffer si queres guardar los cambios.
=M-x= ejecutar comando por nombre.
=C-g= cancela el comando actual, permite descartar una combinacion de teclas que todavia no se ha resuelto en un comando.

=C-l= mueve el texto alrededor del cursor.
=C-s=, =C-r= realiza una busqueda incremental hacia adelante/atras en el buffer actual, se ingresa la palabra a buscar en el minibufer, consecutivos =C-s=, =C-r= mueven el cursor a la siguiente/anterior coincidencia la busqueda se termina con =Enter=.
=C-v= realiza un salto a la siguiente pagina del buffer (como =AvPag=).
=M-v= realiza un salto a la pagina anterior del buffer (como =RePag=).
=C-p=, =C-n= mueve el cursor a la linea anterior/siguiente respectivamente.
=C-b=, =C-f= mueve el cursor un caracter hacia atras/adelante respectivamente.
=M-b=, =M-f= mueve el cursor una palabra hacia atras/adelante respectivamente.
=C-a=, =C-e= mueve el cursor al principio/final de la linea.
=M-a=, =M-e= mueve el cursor al principio/final de la sentencia.

Emacs guarda en el *kill ring* los elementos que fue copiando/cortando, es una lista circular, funciona como un *porta papeles*.

=C-w= cortar texto seleccionado.
=M-w= copiar texto seleccionado.
=C-y= pegar el ultimo elemento que fue copiado/cortado en el *kill ring*.
=M-y= pega el elemento seleccionado del *kill ring*, usos sucesivos del comando inmediatamente despues de haber usado =C-y= permite cambiar el texto pegado iterando en los elementos del *kill ring*.
=C-k= corta desde la posicion del cursor hasta el final de la linea.
=M-k= corta desde la posicion del cursor hasta el final de la sentencia.
=C-d= elimina el siguiente carater desde la posicion del cursor.
=M-d= elimina la siguiente palabra desde la posicion del cursor.
=M-<DEL>= elimina la anterior palabra desde la posicion del cursor.
=C-<SPC>= permite seleccionar un area con el cursor.

=C-/=, =C-_=, =C-x y= restaura el ultimo cambio.

Emacs permite tener *ventanas* que muestren distintos textos, para navegar y manipular ventanas algunos comandos utiles son:

=C-x 0= cierra la ventana enfocada.
=C-x 1= cierra todas las ventanas menos la ventana enfocada.
=C-x 2= divide la ventana actual de forma vertical.
=C-x 3= divide la ventana actual de forma horizontal.
=C-x 4 f= abre el archivo seleccionado en otra ventana.
=C-x o= mueve el cursor a la siguiente ventana de manera circular
=C-M-v=, =C-M-<SHIFT>-v= hace un salto de pagina hacia adelante/atras en la ventana no enfocada

** Autoguardado
Emacs genera automaticamente un archivo #nombrearchiv.extencion# de autoguardado, si por algun motivo se cierra la sesion sin guardar el buffer. La proxima vez que abramos el mismo archivo que se nos cerro de forma inesperada podemos recuperar el trabajo con =M-x recover-this-file=, luego emacs nos preguntara una confirmacion. Una vez guardemos el buffer en un archivo el archivo de autoguardado automaticamente se borrara.


* Configuracion Basica
** Config Basica
Abrir Config.org =C-c c=
Cerrar brakets, mostrar donde cierran, cantidad de espacios del tab (4), mostrar numero de lineas, mostrar lineas largas como varias, borrar seleccion al tipear
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") (lambda () (interactive) (find-file "~/.emacs.d/config.org"))) ; bindeo para abrir config
                                          ;(electric-pair-mode 1)
  (show-paren-mode 1)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default standard-indent 4) 

  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  (electric-indent-mode 1)
  (setq whitespace-line-column 1000)
  (delete-selection-mode 1)
  (auto-image-file-mode t);; para mostrar im√°genes
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)  
#+end_src

** Desactivar barra de menu, scroll, pagina inicio
#+begin_src emacs-lisp
  (setq inhibit-startup-message t visible-bell t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Cambiar directorio de backups.
Emacs cada vez que guardas archivos te crea un backup en el mismo directorio del archivo por defecto, aca muevo todos los backups a una carpeta especifica
#+begin_src emacs-lisp
  (recentf-mode 1)            
  (setq recentf-max-saved-items 50)
  (setq backup-directory-alist `(("." . "~/.emacs.d/autoguardado/")))
#+end_src
** Acciones al guardar este archivo 
Autotanglear archivos .el al guardar archivos.org.
Lo mismo que hacer =C-c C-v t=.
#+begin_src emacs-lisp
  (defun fran/auto-tangle ()
    (when (string-equal (file-name-extension buffer-file-name) "org")
      (org-babel-tangle)))
  (add-hook 'after-save-hook 'fran/auto-tangle)
#+end_src

* Paquetes
** Gestor de paquetes
Inicializo el gestor de paquetes por defecto de emacs, agrego repos melpa y gnu, inicializo use-package.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+end_src

** Vertico
Vertico es una UI para el autocompletado del minibuffer.
#+begin_src emacs-lisp
  (use-package vertico :ensure t
    :custom
    (vertico-scroll-margin 0)
    (vertico-count 20)
    (vertico-resize t)
    (vertico-cycle t)
    :init
    (vertico-mode))
  (keymap-set vertico-map "<left>" #'vertico-directory-up)
  (keymap-set vertico-map "<right>" #'vertico-insert)
#+end_src

** Corfu
UI autocompletado de buffer (codigo).
#+begin_src emacs-lisp
  (use-package corfu :ensure t
    :hook
    (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    (corfu-resize t)
    (corfu-auto-delay 0.25)
    (corfu-auto-prefix 1)
    (corfu-preview-current nil)
    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode)
    )
  (keymap-set corfu-map "TAB" #'corfu-next)
  (keymap-set corfu-map "<backtab>" #'corfu-previous)
  (setq corfu-popupinfo-delay 0.2)

  (with-eval-after-load 'corfu
    (define-key corfu-map (kbd "<next>") #'corfu-popupinfo-scroll-up)
    (define-key corfu-map (kbd "<prior>") #'corfu-popupinfo-scroll-down))

#+end_src

** Which-key
Muestra opciones de autocompletado para comandos.
#+begin_src emacs-lisp
  (use-package which-key :ensure t :config (which-key-mode))
#+end_src

** Marginalia
Muestra metadatos en el minibuffer (info de comandos, permisos de archivos, etc).
#+begin_src emacs-lisp
  (use-package marginalia :ensure t
    :init
    (marginalia-mode))
#+end_src

** Orderless
Agrega busqueda sin orden en los autocompletados.
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Projectile
Mejora la gestion de proyectos, busqueda de archivo en el proyecto, compilacion, etc.
#+begin_src emacs-lisp
  (use-package projectile :ensure t :init (projectile-mode +1)
    :config (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

** Snippets
Yasnippet es para snipets en emacs.
Algunas definiciones de snippets para org-mode, tangle a init.el, a directorio, etc.
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t :config (yas-global-mode 1))

  (yas-define-snippets 'org-mode
                       '(("eli" "#+begin_src emacs-lisp :tangle \"init.el\"\n\n#+end_src"
                          "Bloque de codigo emacs-lisp con tangle a init.el" nil nil nil "~/.emacs.d/snippets/elt" nil nil)

                         ("ela" "#+begin_src emacs-lisp :tangle \"${1:archivo}\" :mkdirp yes\n\n#+end_src"
                          "Bloque de codigo emacs-lisp con tangle a $archivo" nil nil nil "~/.emacs.d/snippets/ela" nil nil)

                         ("suml" "#+begin_src plantuml :file \"${1:archivo}\"\n\n#+end_src"
                          "Bloque de codigo plantuml, guarda en $archivo" nil nil nil "~/.emacs.d/snippets/suml" nil nil)

                         ("sjava" "#+begin_src java :tangle \"${1:archivo}\" :mkdirp yes\n\n#+end_src"
                          "Bloque de codigo java, guarda en $archivo" nil nil nil "~/.emacs.d/snippets/java" nil nil)

                         ("sscm" "#+begin_src scheme \n${1:}\n#+end_src"
                          "Bloque de codigo scheme" nil nil nil "~/.emacs.d/snippets/scheme" nil nil)

                         )
                       )

#+end_src

** Flycheck, Quickrun
Flycheck le da una UI al debuguer/errores de sintaxys/etc numero linea con error, subrayar variable con error,etc.
Quickrun es para hacer ejecucciones de codigo en el buffer.

#+begin_src emacs-lisp
  (use-package yasnippet-snippets :ensure t)
  (use-package flycheck :ensure t :init (global-flycheck-mode))
  (use-package quickrun  :ensure t :bind ("C-c r" . quickrun))
#+end_src

** Devdocs
Le pega a la api de devdocs, cantidad de documentacion cantidad.
#+begin_src emacs-lisp
  (use-package devdocs :ensure t)
  (global-set-key (kbd "C-h D") 'devdocs-lookup)
#+end_src

** Eglot
LSP de emacs, configurado con algunos lenguajes.
#+begin_src emacs-lisp
  (use-package eglot
    ;; :bind (:map eglot-mode-map
    ;;             ("C-c e f n" . flymake-goto-next-error)
    ;;             ("C-c e f p" . flymake-goto-prev-error)
    ;;             ("C-c e r" . eglot-rename)
    ;;             ("C-c e f r" . eglot-format)
    ;;             ("C-c e f b" . eglot-format-buffer)
    ;;             ("C-c e a" . eglot-code-actions))
    :hook
    ((c-mode . eglot-ensure)
     (c++-mode . eglot-ensure))
    :custom
    (fset #'jsonrpc--log-event #'ignore)
    (eglot-events-buffer-size 0))
  (setq eglot-autoshutdown t)

  (add-hook 'java-mode-hook 'eglot-java-mode)
  ;;(with-eval-after-load 'eglot-java
  ;;  (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
  ;;  (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
  ;;  (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
  ;;  (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
  ;;  (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
  ;;  (define-key eglot-java-mode-map (kbd "C-c l R") ;;#'eglot-java-project-build-refresh))

#+end_src

* ORG Mode
** Config basica
#+begin_src emacs-lisp
  (setq-default org-enforce-todo-dependencies t) ; fuerza TODO al padre de un item
  (setq org-startup-with-inline-images t) ; Muestra las imagenes por defecto, en vez de mostrar links
  (add-hook 'org-mode-hook 'org-display-inline-images) ; cuando creo un archivo desde el org mode (por ejemplo una img como resultado de plant uml) actualiza todas las imagenes
#+end_src
** toc-org
Tabla de contenidos org.
#+begin_src emacs-lisp
  (use-package toc-org :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Facha
Para que tire facha el org. Bullets cambia los marcadores de niveles * ** .. etc.
add-hook
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-hide-emphasis-markers t)
#+end_src

** Org-babel
Lenguajes que reconozca org mode en bloques de codigo. Plantuml, etc
*** plantuml
genera bloques plant uml
#+begin_src emacs-lisp
  (use-package plantuml-mode :ensure t)
  (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml/plantuml.jar"))
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scheme . t)
     (plantuml . t)))
#+end_src

* GUI
** Fuentes
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (setq-default line-spacing 0.12)
  (set-face-attribute 'default nil :family "Mononoki Nerd Font" :height 150)
  (set-face-attribute 'org-block nil :family "Iosevka Nerd Font")
#+end_src

** Temas y colorcitos
#+begin_src emacs-lisp
  (setq tema-claro 'doom-tomorrow-day)
  (setq tema-oscuro 'doom-dracula)

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme tema-claro t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

  (use-package rainbow-mode :ensure t :hook (emacs-lisp-mode text-mode lisp-mode org-mode css-mode conf-mode))

  (defun cambiar-tema ()
    (interactive)
    (if (custom-theme-enabled-p tema-oscuro)
        (progn
          (disable-theme tema-oscuro)
          (load-theme tema-claro t))
      (progn
        (disable-theme tema-claro)
        (load-theme tema-oscuro t))))

  (global-set-key (kbd "C-c t") 'cambiar-tema)

  (use-package rainbow-identifiers :ensure t)
  (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
#+end_src
